# Renamify VS Code Extension - Product Requirements Document

## Overview
A VS Code extension that provides smart case-aware search and replace functionality with file renaming capabilities. The extension integrates with the renamify CLI to provide a powerful, safe, and atomic search-replace-rename workflow.

## Core Features

### 1. Activity Bar Integration
- New icon in the activity bar (sidebar) next to the built-in Search
- Opens a dedicated Renamify panel/view
- Custom icon representing the renamify brand

### 2. Search and Replace Interface

#### Input Fields
- **Search Field**: Text input for the search term
- **Replace Field**: Text input for the replacement term (always visible, cannot be collapsed)
- **Files to Include**: Glob pattern input (e.g., `**/*.ts`, `src/**/*`)
- **Files to Exclude**: Glob pattern input (e.g., `node_modules/**`, `*.min.js`)
- **Exclude Matching Lines**: Regex/search string to filter out matches on lines that match (new feature)

#### Case Style Selection
- Multi-select dropdown for case styles:
  - snake_case
  - kebab-case
  - camelCase
  - PascalCase
  - SCREAMING_SNAKE_CASE
  - Title Case
  - Train-Case
  - dot.case
- Ability to select multiple styles for matching/replacing
- Default: auto-detect and match all relevant styles

### 3. Search Results View

#### Results Header
- Summary: "X results in Y files" (e.g., "2256 results in 133 files")
- Expand All / Collapse All icons
- Clear results button
- Apply/Replace All button

#### Results Display
- Tree structure with files as parent nodes
- Each file shows:
  - File path/name
  - Number of matches as a badge (right-aligned)
  - Expand/collapse toggle
- Each match shows:
  - Line number
  - Preview of the line with:
    - Red background with strikethrough for search term
    - Green background for replacement term
  - Context lines (configurable)

#### Interaction
- Click on file to open in editor
- Click on specific match to jump to that line
- Individual replace buttons per match
- Checkbox selection for selective replacement

### 4. Action Buttons
- **Plan**: Generate a renamify plan without applying
- **Preview**: Show detailed preview of all changes
- **Apply**: Execute the replacement (with confirmation dialog)
- **Undo**: Revert last operation
- **History**: View operation history

### 5. Status Bar
- Show current operation status
- Progress indicator for long operations
- Quick stats (files scanned, matches found)

## Technical Implementation

### Architecture
- TypeScript-based VS Code extension
- Shells out to renamify CLI for core operations
- WebView for rich UI components
- VS Code API for file system operations and editor integration

### Commands
- `renamify.search`: Open search panel
- `renamify.plan`: Create replacement plan
- `renamify.apply`: Apply replacements
- `renamify.undo`: Undo last operation
- `renamify.history`: Show history
- `renamify.clearResults`: Clear search results

### Configuration
- `renamify.cliPath`: Path to renamify CLI (auto-detect or user-specified)
- `renamify.respectGitignore`: Honor .gitignore files (default: true)
- `renamify.showContextLines`: Number of context lines in results (default: 2)
- `renamify.autoSaveBeforeApply`: Auto-save files before applying changes
- `renamify.confirmBeforeApply`: Show confirmation dialog (default: true)

### Data Flow
1. User enters search/replace terms and options
2. Extension calls renamify CLI with `--dry-run` for preview
3. Parse CLI JSON output to populate results view
4. User reviews and selects changes
5. Extension calls renamify CLI to apply changes
6. Update view with operation status

## UI/UX Considerations

### Visual Design
- Consistent with VS Code's design language
- Use VS Code theme colors for highlighting
- Clear visual distinction between search and replace terms
- Intuitive icons for all actions

### Performance
- Lazy loading of search results
- Virtual scrolling for large result sets
- Debounce search input
- Progress indicators for long operations

### Error Handling
- Clear error messages for CLI failures
- Graceful fallback if CLI not found
- Validation of input patterns
- Conflict detection and resolution UI

## Integration Points

### VS Code APIs
- TreeDataProvider for results view
- WebviewProvider for rich UI
- FileSystemWatcher for file change detection
- TextEditor API for jumping to matches
- QuickInput API for dialogs

### Renamify CLI Integration
- Spawn CLI process with appropriate arguments
- Parse JSON output from `--dry-run` and `--preview`
- Handle CLI error codes and messages
- Support for all CLI flags and options

## Future Enhancements (Post-MVP)
- Inline replacement preview in editor
- Diff view for file renames
- Batch operations with saved patterns
- Integration with VS Code's refactoring API
- Support for regular expressions in search
- Template/preset management
- Integration with source control for automatic commits

## Success Metrics
- Fast search performance (< 1s for most projects)
- Zero data loss (atomic operations, undo support)
- Intuitive UI (minimal learning curve)
- Reliable CLI integration
- Comprehensive error handling

## Dependencies
- VS Code Extension API
- renamify CLI binary
- Node.js for process spawning
- TypeScript for development

## Testing Requirements
- Unit tests for core logic
- Integration tests with mock CLI
- E2E tests with actual CLI
- UI component tests
- Performance tests with large codebases
- Cross-platform testing (Windows, macOS, Linux)
